### Table Utilities
You can cache a table into memory with:

tbl_cache(sc, "batting")
and unload from memory using:

tbl_uncache(sc, "batting")
Connection Utilities
You can view the Spark web console using the spark_web function:

spark_web(sc)
You can show the log using the spark_log function:

spark_log(sc, n = 10)
## 17/08/25 12:57:40 INFO ContextCleaner: Cleaned accumulator 4349
## 17/08/25 12:57:40 INFO BlockManagerInfo: Removed broadcast_73_piece0 on 127.0.0.1:50036 in memory (size: 10.0 KB, free: 338.3 MB)
## 17/08/25 12:57:40 INFO BlockManagerInfo: Removed broadcast_74_piece0 on 127.0.0.1:50036 in memory (size: 3.7 KB, free: 338.3 MB)
## 17/08/25 12:57:40 INFO ContextCleaner: Cleaned accumulator 4459
## 17/08/25 12:57:40 INFO ContextCleaner: Cleaned accumulator 4460
## 17/08/25 12:57:40 INFO Executor: Finished task 0.0 in stage 72.0 (TID 112). 1196 bytes result sent to driver
## 17/08/25 12:57:40 INFO TaskSetManager: Finished task 0.0 in stage 72.0 (TID 112) in 131 ms on localhost (executor driver) (1/1)
## 17/08/25 12:57:40 INFO TaskSchedulerImpl: Removed TaskSet 72.0, whose tasks have all completed, from pool 
## 17/08/25 12:57:40 INFO DAGScheduler: ResultStage 72 (count at NativeMethodAccessorImpl.java:0) finished in 0.131 s
## 17/08/25 12:57:40 INFO DAGScheduler: Job 49 finished: count at NativeMethodAccessorImpl.java:0, took 0.134441 s
Finally, we disconnect from Spark:

spark_disconnect(sc)
RStudio IDE
The latest RStudio Preview Release of the RStudio IDE includes integrated support for Spark and the sparklyr package, including tools for:

Creating and managing Spark connections
Browsing the tables and columns of Spark DataFrames
Previewing the first 1,000 rows of Spark DataFrames
Once you’ve installed the sparklyr package, you should find a new Spark pane within the IDE. This pane includes a New Connection dialog which can be used to make connections to local or remote Spark instances:



Once you’ve connected to Spark you’ll be able to browse the tables contained within the Spark cluster and preview Spark DataFrames using the standard RStudio data viewer:



You can also connect to Spark through Livy through a new connection dialog:



The RStudio IDE features for sparklyr are available now as part of the RStudio Preview Release.

Using H2O
rsparkling is a CRAN package from H2O that extends sparklyr to provide an interface into Sparkling Water. For instance, the following example installs, configures and runs h2o.glm:

options(rsparkling.sparklingwater.version = "2.1.0")

library(rsparkling)
library(sparklyr)
library(dplyr)
library(h2o)

sc <- spark_connect(master = "local", version = "2.1.0")
mtcars_tbl <- copy_to(sc, mtcars, "mtcars")

mtcars_h2o <- as_h2o_frame(sc, mtcars_tbl, strict_version_check = FALSE)

mtcars_glm <- h2o.glm(x = c("wt", "cyl"), 
                      y = "mpg",
                      training_frame = mtcars_h2o,
                      lambda_search = TRUE)
mtcars_glm
## Model Details:
## ==============
## 
## H2ORegressionModel: glm
## Model ID:  GLM_model_R_1503683883296_1 
## GLM Model: summary
##     family     link                              regularization
## 1 gaussian identity Elastic Net (alpha = 0.5, lambda = 0.1013 )
##                                                                lambda_search
## 1 nlambda = 100, lambda.max = 10.132, lambda.min = 0.1013, lambda.1se = -1.0
##   number_of_predictors_total number_of_active_predictors
## 1                          2                           2
##   number_of_iterations                                training_frame
## 1                    0 frame_rdd_29_9b117dc470ba6f8aa3340ee2e18d44eb
## 
## Coefficients: glm coefficients
##       names coefficients standardized_coefficients
## 1 Intercept    38.941654                 20.090625
## 2       cyl    -1.468783                 -2.623132
## 3        wt    -3.034558                 -2.969186
## 
## H2ORegressionMetrics: glm
## ** Reported on training data. **
## 
## MSE:  6.017684
## RMSE:  2.453097
## MAE:  1.940985
## RMSLE:  0.1114801
## Mean Residual Deviance :  6.017684
## R^2 :  0.8289895
## Null Deviance :1126.047
## Null D.o.F. :31
## Residual Deviance :192.5659
## Residual D.o.F. :29
## AIC :156.2425
spark_disconnect(sc)
Connecting through Livy
Livy enables remote connections to Apache Spark clusters. Connecting to Spark clusters through Livy is under experimental development in sparklyr. Please post any feedback or questions as a GitHub issue as needed.

Before connecting to Livy, you will need the connection information to an existing service running Livy. Otherwise, to test livy in your local environment, you can install it and run it locally as follows:
<pre><code>
livy_install()
livy_service_start()
To connect, use the Livy service address as master and method = "livy" in spark_connect. Once connection completes, use sparklyr as usual, for instance:
<pre><code>
sc <- spark_connect(master = "http://localhost:8998", method = "livy")
copy_to(sc, iris)
## # Source:   table<iris> [?? x 5]
## # Database: spark_connection
##    Sepal_Length Sepal_Width Petal_Length Petal_Width Species
##           <dbl>       <dbl>        <dbl>       <dbl>   <chr>
##  1          5.1         3.5          1.4         0.2  setosa
##  2          4.9         3.0          1.4         0.2  setosa
##  3          4.7         3.2          1.3         0.2  setosa
##  4          4.6         3.1          1.5         0.2  setosa
##  5          5.0         3.6          1.4         0.2  setosa
##  6          5.4         3.9          1.7         0.4  setosa
##  7          4.6         3.4          1.4         0.3  setosa
##  8          5.0         3.4          1.5         0.2  setosa
##  9          4.4         2.9          1.4         0.2  setosa
## 10          4.9         3.1          1.5         0.1  setosa
## # ... with more rows
spark_disconnect(sc)
</code></pre>
Once you are done using livy locally, you should stop this service with:
<pre><code>
livy_service_stop()
</code></pre>
To connect to remote livy clusters that support basic authentication connect as:
<pre><code>
config <- livy_config_auth("<username>", "<password">)
sc <- spark_connect(master = "<address>", method = "livy", config = config)
spark_disconnect(sc)
</code></pre>
